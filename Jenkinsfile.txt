pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                script {
                    // Build the code using Maven
                    bat 'mvn clean package'
                }
            }
        }
        
        stage('Unit and Integration Tests') {
            steps {
                script {
                    // Run unit tests
                    bat 'mvn test'
                    
                    // Run integration tests
                    // Assuming you have integration tests in a separate directory
                    bat 'mvn integration-test'
                }
            }
        }
        
        stage('Code Analysis') {
            steps {
                script {
                    // Run code analysis using SonarQube
                    sh 'sonar-scanner'
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    // Run security scan using OWASP Dependency-Check
                    bat 'mvn org.owasp:dependency-check-maven:check'
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    // Deploy the application to staging using AWS CodeDeploy or Docker
                    bat 'aws deploy push --application-name MyApp --s3-location s3://mybucket/myapp.zip --ignore-hidden-files'
                }
            }
        }
        
        stage('Integration Tests on Staging') {
            steps {
                script {
                    // Run integration tests on staging environment
                    // This could involve deploying the application to staging and then running tests against it
                    // For example, using Selenium or Postman
                    bat 'selenium-tests.sh'
                }
            }
        }
        
        stage('Deploy to Production') {
            steps {
                script {
                    // Deploy the application to production using AWS CodeDeploy or Docker
                    bat 'aws deploy push --application-name MyApp --s3-location s3://mybucket/myapp.zip --ignore-hidden-files'
                }
            }
        }
    }
    
    post {
        success {
            emailext body: "Pipeline successful",
                     subject: "Pipeline successful",
                     to: "anandchowdary521@gmail.com",
                     attachLog: true
        }
        failure {
            emailext body: "Pipeline failed",
                     subject: "Pipeline failed",
                     to: "anandchowdary521@gmail.com",
                     attachLog: true
        }
    }
}
